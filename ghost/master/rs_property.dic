///////// ゴースト模擬戦闘 関連辞書
///////// written by C.Ponapalt


/*********************************************************
* ゴースト模擬戦闘 コア
* Special Thanks To hinoharu.
*********************************************************/

// 【入力】キャラクター名列挙。カンマ区切り。\p[2]以降があるならそれも。

#define PROPERTY_CHARACTER_NAME "オフィーリア,エプシロン"

OnJitenBattle
{
	_carray = SPLIT(PROPERTY_CHARACTER_NAME,',')
	_charside1 = ASEARCH(reference[1],_carray)
	_charside2 = ASEARCH(reference[2],_carray)
	
	if _charside1 >= 0 {
		_ref = (reference[0],reference[2],reference[3],reference[4],reference[5],reference[6])
		
		_func = 'BATTLE.' + TOSTR(_charside1) + '.' + reference[3]
		if ISFUNC(_func) {
			_funcref = _func + '(_ref)' 
			EVAL(_funcref )
			return
		}
		
		_func = 'BATTLE.' + TOSTR(_charside1) + '.Attack'
		if ISFUNC(_func) {
			_funcref = _func + '(_ref)' 
			EVAL(_funcref )
			return
		}
	}
	
	if _charside2 >= 0 {
		_ref = (reference[0],reference[1],reference[3],reference[4],reference[6],reference[5])
		
		_func = 'BATTLE.' + TOSTR(_charside2) + '.Defense'
		if ISFUNC(_func) {
			_funcref = _func + '(_ref)' 
			EVAL(_funcref )
			return
		}
	}
}

BATTLE.0.Attack
{
	if TOINT(_argv[5]) <= 0
	{
		BATTLE.0.Win(_argv)
	}
	else
	{
		_func = 'BATTLE.0.Attack.' + _argv[2]
		if ISFUNC(_func) { EVAL( _func + '(_argv)') }
	}
}

BATTLE.0.Defense
{
	if TOINT(_argv[4]) <= 0
	{
		BATTLE.0.Lose(_argv)
	}
	else
	{
		_func = 'BATTLE.0.Defense.' + _argv[2]
		if ISFUNC(_func) { EVAL( _func + '(_argv)') }
	}
}

BATTLE.1.Attack
{
	if TOINT(_argv[5]) <= 0
	{
		BATTLE.1.Win(_argv)
	}
	else
	{
		_func = 'BATTLE.1.Attack.' + _argv[2]
		if ISFUNC(_func) { EVAL( _func + '(_argv)') }
	}
}


BATTLE.1.Defense
{
	if TOINT(_argv[4]) <= 0
	{
		BATTLE.1.Lose(_argv)
	}
	else
	{
		_func = 'BATTLE.1.Defense.' + _argv[2]
		if ISFUNC(_func) { EVAL( _func + '(_argv)') }
	}
}


////////////////////////////////////////////////////////////////////////
//// ここから編集する部分 //////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

// 以下の変数が使えます。
// _argv[0] : 送信元「ごーすとじてん」
// _argv[1] : 相手のキャラクタ名
// _argv[2] : 戦闘結果 (物理|精神)攻撃(成功|失敗|回避|ミス) 開始時「模擬戦闘開始」
// _argv[3] : 攻撃により発生したダメージ
// _argv[4] : 自分のLIFE
// _argv[5] : 相手のLIFE

/*********************************************************
* \h
*********************************************************/

BATTLE.0.模擬戦闘開始
{
	// 【入力】\hの戦闘開始時の挨拶
	"\0\s[6]システム、\w4戦闘モードに切り替え。\w9\n\s[0]%(_argv[1])さん、\w5よろしくお願いします。\w9\n\1\s[10]グッドラック、\w4アルギズ。"
}

/////////////////////
// \hの攻撃
/////////////////////

/* 物理攻撃 */

BATTLE.0.Attack.物理攻撃成功
{
	// 【入力】\hの物理攻撃が成功したときの台詞
	"\1\s[10]目標に命中確認。\w9\n\0\s[0]了解、\w4攻撃を続行します。\e"
}

BATTLE.0.Attack.物理攻撃失敗
{
	// 【入力】\hの物理攻撃が失敗したときの台詞
	"\0\s[0]外れましたか。\w9\n\1\s[10]そう言うときもある。\e"
}

BATTLE.0.Attack.物理攻撃回避
{
	// 【入力】\hの物理攻撃が回避されたときの台詞
	"\0\s[0]良い回避ですね。\w9\n\1\s[10]模擬弾だから。\w9\n\0\s[0]回避は回避です。\e"
}

BATTLE.0.Attack.物理攻撃ミス
{
	// 【入力】\hの物理攻撃が発動ミスしたときの台詞
	"\0\s[0]こんな時に弾詰まりですか。\w9\n\1\s[10]ジャムめ。\w9\n\0\s[0]…\w4…\e"
}

/* 精神攻撃 */

BATTLE.0.Attack.精神攻撃成功
{
	// 【入力】\hの精神攻撃が成功したときの台詞
	"\1\s[10]\0\s[0]予想より効果があるようです。\n\1\s[10]何をしたんだい?\w9\n\0\s[0]秘密、\w4です。\e"
}

BATTLE.0.Attack.精神攻撃失敗
{
	// 【入力】\hの精神攻撃が失敗したときの台詞
	"\0\s[0]精神的に揺さぶりをかけるのは苦手です。\w9\n\1\s[10]嘘つき。\e"
}

BATTLE.0.Attack.精神攻撃回避
{
	// 【入力】\hの精神攻撃が回避されたときの台詞
	"\0\s[0]視覚聴覚主体ですから、\w4回避しやすいですよね。\w9\n\1\s[10]確かに。\e"
}

BATTLE.0.Attack.精神攻撃ミス
{
	// 【入力】\hの物理攻撃が発動ミスしたときの台詞
	"\0\s[0]…\w4…。\w9\n\1\s[10]そう言うこともあるさ。\e"
}


/////////////////////
// \hの防御
/////////////////////

/* 物理攻撃防御 */

BATTLE.0.Defense.物理攻撃成功
{
	// 【入力】\hに対する物理攻撃の防御に失敗したときの台詞
	"\0\s[0]装甲に損傷確認。\e"
}

BATTLE.0.Defense.物理攻撃失敗
{
	// 【入力】\hに対する物理攻撃の防御に成功したときの台詞
	// 原因：相手の攻撃失敗
	"\0\s[0]シールド防御成功、\w4戦闘続行します。\e"
}

BATTLE.0.Defense.物理攻撃回避
{
	// 【入力】\hに対する物理攻撃の防御に成功したときの台詞
	// 原因：回避成功
	"\1\s[10]\0\s[0]回避成功、\w4戦闘続行します。\e"
}

BATTLE.0.Defense.物理攻撃ミス
{
	// 【入力】\hに対する物理攻撃の防御に成功したときの台詞
	// 原因：相手の攻撃発動ミス
	"\1\s[10]相手の様子がおかしい。\w9\n\0\s[0]不発でしょう。\e"
}

/* 精神攻撃防御 */

BATTLE.0.Defense.精神攻撃成功
{
	// 【入力】\hに対する精神攻撃の防御に失敗したときの台詞
	"\0\s[0]く\w4…\w4…。\w9\n\1\s[10]AIの負荷増大。\e"
}

BATTLE.0.Defense.精神攻撃失敗
{
	// 【入力】\hに対する精神攻撃の防御に成功したときの台詞
	// 原因：相手の攻撃失敗
	"\0\s[0]優しいんですね。\w9\n\1\s[10]皮肉か。\e"
}

BATTLE.0.Defense.精神攻撃回避
{
	// 【入力】\hに対する精神攻撃の防御に成功したときの台詞
	// 原因：回避成功
	"\0\s[0]そんなものが通じると思っているのですか。\w9\n\1\s[10]…\w4…\e"
}

BATTLE.0.Defense.精神攻撃ミス
{
	// 【入力】\hに対する精神攻撃の防御に成功したときの台詞
	// 原因：相手の攻撃発動ミス
	"\1\s[10]不発か。\w9\n\0\s[0]反撃に移ります。\e"
}

/////////////////////
// \h・結末
/////////////////////

BATTLE.0.Win
{
	// 【入力】\hの攻撃の結果、相手のLIFE<=0となり、勝利したときの台詞
	"\1\s[10]アルギズ、\w4%(_argv[1])さんお疲れ様。\w9\n\0\s[0]%(_argv[1])さん、\w4アズ、\w4お疲れ様です。\w9\n次の機会もよろしくお願いします。"
}

BATTLE.0.Lose
{
	// 【入力】相手の攻撃の結果、自分のLIFE<=0となり、敗北したときの台詞
	"\1\s[10]アルギズ、\w4%(_argv[1])さんお疲れ様。\w9\n\0\s[0]%(_argv[1])さん、\w4アズ、\w4お疲れ様です。\w9\n次の機会もよろしくお願いします。"
}



/*********************************************************
* \u
*********************************************************/

BATTLE.1.模擬戦闘開始
{
	// 【入力】\uの戦闘開始時の挨拶
	"\1\s[10]あまり、\w4前線に出るのは得意じゃないんだけどな。\w9\n\n[half]/
	\0\s[0]アズ、\w4グッドラックです。\e"
}

/////////////////////
// \uの攻撃
/////////////////////

/* 物理攻撃 */

BATTLE.1.Attack.物理攻撃成功
{
	// 【入力】\uの物理攻撃が成功したときの台詞
	"\1\s[10]見ろ、\w4パーツがゴミのようだ。\w9\n\n[half]/
	\0\s[0]実際に廃棄パーツですよね。\w9\e"
	"\1\s[10]当たれエニアックの一部分。\w9\n\n[half]/
	\0\s[0]何処から出したんですか。\e"
}

BATTLE.1.Attack.物理攻撃失敗
{
	// 【入力】\uの物理攻撃が失敗したときの台詞
	"\1\s[10]手が滑ってしまった。\w9\n\n[half]/
	\0\s[0]落ち着いてください。\w9\e"
	"\1\s[10]ああ、\w4折角作ったのに勿体ない。\w9\n\n[half]/
	\0\s[0]作ったんですか?\w9\n\n[half]/
	\1\s[10]うん、\w4気合いで。\e"
}

BATTLE.1.Attack.物理攻撃回避
{
	// 【入力】\uの物理攻撃が回避されたときの台詞
	"\1\s[10]年代物のパーツなのに外すとは残念だ。\w9\n\n[half]/
	\0\s[0]残念がるところ、\w4間違えてます。\e"
	"\1\s[10]真空管が割れたに違いない。\w9\n\n[half]/
	\0\s[0]何処からそんな年代物を持ってきたんです?\w9\n\n[half]/
	\1\s[10]作ればあるよ、\w4此処にあるよ。\e"
}

BATTLE.1.Attack.物理攻撃ミス
{
	// 【入力】\uの物理攻撃が発動ミスしたときの台詞
	"\1\s[10]弾切れか。\w9\n\n[half]/
	\0\s[0]在庫切れです。\w9\e"
}

/* 精神攻撃 */

BATTLE.1.Attack.精神攻撃成功
{
	// 【入力】\uの精神攻撃が成功したときの台詞
	"\1\s[10]難しい本は効果があるようだね。\w9\n\n[half]/
	\0\s[0]あの本、\w4面白いのですが……。\e"
}

BATTLE.1.Attack.精神攻撃失敗
{
	// 【入力】\uの精神攻撃が失敗したときの台詞
	"\1\s[10]この本は効果なし、\w4と。\w9\n\n[half]/
	\0\s[0]次はどうするつもりですか?\w9\n\n[half]/
	\1\s[10]秘密。\e"
}

BATTLE.1.Attack.精神攻撃回避
{
	// 【入力】\uの精神攻撃が回避されたときの台詞
	"\1\s[10]見向きもしないか。\w9\n\n[half]/
	\0\s[0]表紙で騙そうと言うのが無理だと思います。\e"
}

BATTLE.1.Attack.精神攻撃ミス
{
	// 【入力】\uの物理攻撃が発動ミスしたときの台詞
	"\1\s[10]あの本は何処に置いたかな。\w9\n\n[half]/
	\0\s[0]何処かに紛れたのでしょうか。\e"
}


/////////////////////
// \uの防御
/////////////////////

/* 物理攻撃防御 */

BATTLE.1.Defense.物理攻撃成功
{
	// 【入力】\uに対する物理攻撃の防御に失敗したときの台詞
	"\1\s[10]ぐ。\w9\n\n[half]/
	\0\s[0]大丈夫ですか?\w9\n\n[half]/
	\1\s[10]問題ない。\e"
}

BATTLE.1.Defense.物理攻撃失敗
{
	// 【入力】\uに対する物理攻撃の防御に成功したときの台詞
	// 原因：相手の攻撃失敗
	"\1\s[10]良い奴だ。\w9\n\n[half]/
	\0\s[0]ただの失敗だと思いますけど。\w9\e"
}

BATTLE.1.Defense.物理攻撃回避
{
	// 【入力】\uに対する物理攻撃の防御に成功したときの台詞
	// 原因：回避成功
	"\1\s[10]意外と回避できるね。\w9\n\n[half]/
	\0\s[0]落ち着いて相手を見ればできますよ。\w9\e"
}

BATTLE.1.Defense.物理攻撃ミス
{
	// 【入力】\uに対する物理攻撃の防御に成功したときの台詞
	// 原因：相手の攻撃発動ミス
	"\1\s[10]失敗、\w4か。\e"
}

/* 精神攻撃防御 */

BATTLE.1.Defense.精神攻撃成功
{
	// 【入力】\uに対する精神攻撃の防御に失敗したときの台詞
	"\1\s[10]良い煽りだ。\w9\n\n[half]/
	\0\s[9]煽りなんですか、\w4これ。\e"
}

BATTLE.1.Defense.精神攻撃失敗
{
	// 【入力】\uに対する精神攻撃の防御に成功したときの台詞
	// 原因：相手の攻撃失敗
	"\1\s[10]言葉の選択を間違えたようだね。\e"
}

BATTLE.1.Defense.精神攻撃回避
{
	// 【入力】\uに対する精神攻撃の防御に成功したときの台詞
	// 原因：回避成功
	"\1\s[10]これがスルー力だ。\w9\n\n[half]/
	\0\s[0]…\w4…。\e"
}

BATTLE.1.Defense.精神攻撃ミス
{
	// 【入力】\uに対する精神攻撃の防御に成功したときの台詞
	// 原因：相手の攻撃発動ミス
	"\1\s[10]今日も平和だ。\e"
}

/////////////////////
// \u・結末
/////////////////////

BATTLE.1.Win
{
	// 【入力】\uの攻撃の結果、相手のLIFE<=0となり、勝利したときの台詞
	"\1\s[10]何とか勝てたようだね。\w9\n\n[half]/
	\0\s[0]そのようですね。\w9\n\n[half]/
	\1\s[10]%(_argv[1])、\w4良い経験が出来たよ。\w9\n/
	ありがとう。\e"
}

BATTLE.1.Lose
{
	// 【入力】相手の攻撃の結果、自分のLIFE<=0となり、敗北したときの台詞
	"\1\s[10]やはり、\w4無理があったか。\w9\n/
	%(_argv[1])、\w4ありがとう。\w9\n\n[half]/
	\0\s[0]お疲れ様です。\e"
}

/*********************************************************
* ゴーストプロパティを返す
*********************************************************/

/////////////////////
// プロパティ要求対応 
/////////////////////

OnRequestProperty
{
	_text = ''
	_cname = SPLIT(PROPERTY_CHARACTER_NAME,',')
	if TOINT(reference[1]) < 0 { //負の場合はキャラ数を返すでっちあげ仕様
		_text = '2'
	}
	else {
		if reference[2] == 'name' || reference[2] == 'キャラクター名' {
			_text = _cname[TOINT(reference[1])]
		}
		else {
			_text = EVAL('プロパティ' + reference[1] + "('" + reference[2] + "')")
		}
	}
	
	if STRLEN(_text) {
		"\C\![raiseother,%(reference[0]),OnGetProperty,%(_cname[0]),%(reference[1]),%(reference[2]),%(_text)]"
	}
}

プロパティ0
{
	case _argv[0] {
		when '年齢層','世代' {
			// 【入力】\hの年齢層・世代 (子供|若者|大人|老人|不明)
			'不明'
		}
		when '性別' {
			// 【入力】\hの性別 (男性|女性|雌雄同体|不明)
			'女性'
		}
		when '種族' {
			// 【入力】\hの種族
			'アンドロイド'
		}
		when '種族タイプ' {
			// 【入力】\hの種族タイプ (人型|獣型|植物型|不定形型|無機物型)
			'人型'
		}
		when 'プロフィール' {
			// 【入力】\hのプロフィール文章
			'イクサイスシステム「ロッシュの限界」のイクサイスの戦闘用アンドロイド。\n大の猫好きでロマンチスト（エプシロン談）。'
		}
		
		//CyberSphere
		//とりあえず基本的にLIFE以外を足して60前後になるように調整すると「ふつう」になる
		when '行動タイプ' { //物理攻撃 or 精神攻撃
			'物理攻撃' //射撃中心
		}
		when 'LIFE' { //体力
			20 //硬い
		}
		when 'STR' { //筋力
			19 //戦闘用ですから
		}
		when 'DEX' { //器用
			19 //戦闘用ですから
		}
		when 'AGL' { //敏捷
			17 //戦闘用ですから
		}
		when 'MIN' { //精神
			18 //集中力無くして狙撃は無理
		}
		when 'INT' { //知力
			16 //戦闘用ですから
		}
		when 'SEN' { //感性
			15 //こんなところか。
		}
	}
}

プロパティ1
{
	case _argv[0] {
		when '年齢層','世代' {
			// 【入力】\uの年齢層・世代 (子供|若者|大人|老人|不明)
			'若者'
		}
		when '性別' {
			// 【入力】\uの性別 (男性|女性|雌雄同体|不明)
			'男性'
		}
		when '種族' {
			// 【入力】\uの種族
			'人間'
		}
		when '種族タイプ' {
			// 【入力】\uの種族タイプ (人型|獣型|植物型|不定形型|無機物型)
			'人型'
		}
		when 'プロフィール' {
			'イクサイスシステム「ロッシュの限界」のサポートの少年。\n彼自身は遠くの開発室に居て、サポートユニットを操る。\n比較的淡々とした傾向、\w4リアリスト。'
		}
		//CyberSphere
		//とりあえず基本的にLIFE以外を足して60前後になるように調整すると「ふつう」になる
		when '行動タイプ' { //物理攻撃 or 精神攻撃
			'精神攻撃' //疑似魔法万歳。
		}
		when 'LIFE' { //体力
			10 //まぁ、これぐらいかと。
		}
		when 'STR' { //筋力
			8 //ないよ。
		}
		when 'DEX' { //器用
			13 //そこそこ
		}
		when 'AGL' { //敏捷
			15 //そこそこ
		}
		when 'MIN' { //精神
			18 //そこそこ?
		}
		when 'INT' { //知力
			18 //ちと高いかもだ。
		}
		when 'SEN' { //感性
			14 //感性は良くも悪くもないかな。
		}
	}
}